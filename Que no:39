#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

void decryptAdditive(const char *ciphertext, char *plaintext, int key) {
    int length = strlen(ciphertext);

    for (int i = 0; i < length; i++) {
        if (isalpha(ciphertext[i])) {
            char uppercaseChar = toupper(ciphertext[i]);
            int index = uppercaseChar - 'A';
            int newIndex = (index - key + ALPHABET_SIZE) % ALPHABET_SIZE;
            plaintext[i] = islower(ciphertext[i]) ? tolower('A' + newIndex) : ('A' + newIndex);
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[length] = '\0';
}

int main() {
    const char *ciphertext = "Zklv lv d whvw phvvdjh.";
    const char *alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    
    int topPlaintexts = 10; // Number of top plaintexts to display
    
    char potentialPlaintexts[topPlaintexts][strlen(ciphertext) + 1];
    
    printf("Ciphertext: %s\n", ciphertext);

    for (int key = 1; key <= ALPHABET_SIZE; key++) {
        char decryptedText[strlen(ciphertext) + 1];
        decryptAdditive(ciphertext, decryptedText, key);
        
        printf("\nKey: %d\n", key);
        printf("Decrypted Text: %s\n", decryptedText);
        
        if (key <= topPlaintexts) {
            strcpy(potentialPlaintexts[key - 1], decryptedText);
        }
    }

    printf("\nTop %d Possible Plaintexts:\n", topPlaintexts);
    for (int i = 0; i < topPlaintexts; i++) {
        printf("%d. %s\n", i + 1, potentialPlaintexts[i]);
    }

    return 0;
}
